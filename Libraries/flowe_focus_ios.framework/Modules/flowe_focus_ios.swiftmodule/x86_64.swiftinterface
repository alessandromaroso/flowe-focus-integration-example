// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name flowe_focus_ios
import AVFoundation
import Combine
import Contentful
import Foundation
import Swift
import SwiftUI
import UIKit
import URLImage
@_exported import flowe_focus_ios
public enum FocusContentType : Swift.String {
  case serie
  case collection
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct FocusContent : Swift.Hashable, Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String
  public let count: Swift.Int
  public let imageUrl: Swift.String?
  public let type: flowe_focus_ios.FocusContentType
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.String
  public static func == (a: flowe_focus_ios.FocusContent, b: flowe_focus_ios.FocusContent) -> Swift.Bool
}
public enum FocusManagerError : Swift.Error {
  case managerNotConfigured
  case missingResult
  public static func == (a: flowe_focus_ios.FocusManagerError, b: flowe_focus_ios.FocusManagerError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct FocusManagerConfiguration {
  public struct Colors {
    public init(backgroundGradient: [SwiftUI.Color], headerGradient: [SwiftUI.Color], accentColor: SwiftUI.Color, textColor: SwiftUI.Color, primaryBackground: SwiftUI.Color, secondaryBackground: SwiftUI.Color)
    public static func defaults() -> flowe_focus_ios.FocusManagerConfiguration.Colors
  }
  public init(accessToken: Swift.String, spaceId: Swift.String, environmentId: Swift.String = "master", colors: flowe_focus_ios.FocusManagerConfiguration.Colors = .defaults())
}
@_hasMissingDesignatedInitializers public class FocusManagerProvider {
  public static let sharedManager: flowe_focus_ios.FocusManager
  @objc deinit
}
public protocol FocusManager {
  func configure(with config: flowe_focus_ios.FocusManagerConfiguration)
  func update(colors: flowe_focus_ios.FocusManagerConfiguration.Colors)
  func getHighlightedContent() -> Combine.AnyPublisher<[flowe_focus_ios.FocusContent], Swift.Error>
  func getNewContentCount() -> Combine.AnyPublisher<Swift.Int, Swift.Error>
  func createFocusScene(for content: flowe_focus_ios.FocusContent?) -> SwiftUI.AnyView
}
extension flowe_focus_ios.FocusContentType : Swift.Equatable {}
extension flowe_focus_ios.FocusContentType : Swift.Hashable {}
extension flowe_focus_ios.FocusContentType : Swift.RawRepresentable {}
extension flowe_focus_ios.FocusManagerError : Swift.Equatable {}
extension flowe_focus_ios.FocusManagerError : Swift.Hashable {}
